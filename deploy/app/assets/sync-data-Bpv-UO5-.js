import{e as c}from"./index-DCzl8a2M.js";async function S(){if(!c){console.log("Supabase not available, skipping activity log sync");return}try{const e=JSON.parse(localStorage.getItem("activity_logs")||"[]");if(e.length===0){console.log("No local logs to sync");return}console.log(`Syncing ${e.length} local activity logs to Supabase`);const o=e.map(n=>({user_id:n.user_id,type:n.type,action:n.action,description:n.description,details:n.details||null,created_at:n.created_at})),{error:i}=await c.from("activity_logs").insert(o);i?console.error("Error syncing activity logs to Supabase:",i):console.log("Successfully synced activity logs to Supabase")}catch(e){console.error("Error in syncActivityLogs:",e)}}async function b(){if(!c){console.log("Supabase not available, skipping activity log fetch");return}try{console.log("Fetching activity logs from Supabase...");const{data:e,error:o}=await c.from("activity_logs").select("*").order("created_at",{ascending:!1});if(o){console.error("Error fetching activity logs from Supabase:",o);return}if(!e||e.length===0){console.log("No activity logs found in Supabase");return}console.log(`Fetched ${e.length} activity logs from Supabase`);const i=JSON.parse(localStorage.getItem("activity_logs")||"[]"),n=new Set(i.map(a=>a.id)),r=e.map(a=>({id:a.id,user_id:a.user_id,type:a.type,action:a.action,description:a.description,details:a.details,created_at:a.created_at})).filter(a=>!n.has(a.id));if(r.length>0){const a=[...r,...i].sort((l,t)=>new Date(t.created_at).getTime()-new Date(l.created_at).getTime());localStorage.setItem("activity_logs",JSON.stringify(a)),console.log(`Added ${r.length} new logs from Supabase to localStorage`)}else console.log("No new logs to add from Supabase")}catch(e){console.error("Error in fetchAndMergeActivityLogs:",e)}}async function h(){if(!c){console.log("Supabase not available, skipping salary data sync");return}try{const{data:e,error:o}=await c.from("salary_components").select(`
        id,
        employee_id,
        month,
        year,
        bonus,
        allowances,
        deductions,
        purchases,
        loans,
        absences,
        overtime_hours,
        penalty_days,
        net_salary,
        created_at,
        employees(name)
      `).order("created_at",{ascending:!1});if(o){console.error("Error fetching salary data from Supabase:",o);return}if(!e||e.length===0){console.log("No salary data found in Supabase");return}console.log(`Fetched ${e.length} salary records from Supabase`);const i=e.map(a=>{var l;return{id:`${a.employee_id}-${a.month}-${a.year}`,employeeId:a.employee_id,employeeName:((l=a.employees)==null?void 0:l.name)||"Unknown",month:a.month,year:a.year.toString(),baseSalary:0,incentives:a.allowances||0,bonuses:a.bonus||0,absences:a.absences||0,penalties:a.deductions||0,advances:a.loans||0,purchases:a.purchases||0,totalSalary:(a.net_salary||0)+(a.deductions||0),totalDeductions:a.deductions||0,netSalary:a.net_salary||0,createdAt:a.created_at||new Date().toISOString()}}),n=JSON.parse(localStorage.getItem("salaries")||"[]"),d=new Set(n.map(a=>a.id)),r=i.filter(a=>!d.has(a.id));if(r.length>0){const a=[...r,...n].sort((l,t)=>new Date(t.createdAt).getTime()-new Date(l.createdAt).getTime());localStorage.setItem("salaries",JSON.stringify(a)),console.log(`Added ${r.length} new salary records from Supabase to localStorage`)}else console.log("No new salary records to add from Supabase")}catch(e){console.error("Error in syncSalaryData:",e)}}async function I(){if(!c)return console.log("Supabase not available, skipping data sync"),{success:!1,message:"Supabase not available"};try{return console.log("Starting full data synchronization..."),await S(),await b(),await h(),await _(),await w(),await v(),console.log("Data synchronization completed successfully"),{success:!0,message:"Data synchronized successfully"}}catch(e){return console.error("Error in syncAllData:",e),{success:!1,message:`Error synchronizing data: ${e instanceof Error?e.message:String(e)}`}}}async function _(){try{const e=JSON.parse(localStorage.getItem("employees")||"[]");if(e.length===0){console.log("No local employees to sync");return}const{data:o,error:i}=await c.from("employees").select("*");if(i){console.error("Error fetching employees from Supabase:",i);return}if(!o||o.length===0){console.log("No employees in Supabase, pushing all local employees");const{error:t}=await c.from("employees").insert(e.map(g));t?console.error("Error pushing employees to Supabase:",t):console.log(`Successfully pushed ${e.length} employees to Supabase`);return}const n=new Map(o.map(t=>[t.id,t])),d=new Map(e.map(t=>[t.id,t])),r=e.filter(t=>!n.has(t.id)),a=e.filter(t=>{const s=n.get(t.id);if(!s)return!1;const u=new Date(t.updated_at||t.created_at||0),p=new Date(s.updated_at||s.created_at||0);return u>p}),l=o.filter(t=>{const s=d.get(t.id);if(!s)return!0;const u=new Date(s.updated_at||s.created_at||0);return new Date(t.updated_at||t.created_at||0)>u});if(r.length>0){const{error:t}=await c.from("employees").insert(r.map(g));t?console.error("Error inserting employees to Supabase:",t):console.log(`Successfully inserted ${r.length} employees to Supabase`)}for(const t of a){const{error:s}=await c.from("employees").update(g(t)).eq("id",t.id);s&&console.error(`Error updating employee ${t.id} in Supabase:`,s)}if(a.length>0&&console.log(`Successfully updated ${a.length} employees in Supabase`),l.length>0){const t=[...e];for(const s of l){const u=t.findIndex(p=>p.id===s.id);u>=0?t[u]=y(s):t.push(y(s))}localStorage.setItem("employees",JSON.stringify(t)),console.log(`Successfully pulled ${l.length} employees from Supabase`)}}catch(e){console.error("Error in syncEmployees:",e)}}async function w(){try{const e=JSON.parse(localStorage.getItem("advances")||"[]");if(e.length===0){console.log("No local advances to sync");return}const{data:o,error:i}=await c.from("advances").select("*");if(i){console.error("Error fetching advances from Supabase:",i);return}if(!o||o.length===0){console.log("No advances in Supabase, pushing all local advances");const{error:t}=await c.from("advances").insert(e.map(f));t?console.error("Error pushing advances to Supabase:",t):console.log(`Successfully pushed ${e.length} advances to Supabase`);return}const n=new Map(o.map(t=>[t.id,t])),d=new Map(e.map(t=>[t.id,t])),r=e.filter(t=>!n.has(t.id)),a=e.filter(t=>{const s=n.get(t.id);return s?t.status!==s.status||t.remainingAmount!==s.remaining_amount:!1}),l=o.filter(t=>!d.has(t.id));if(r.length>0){const{error:t}=await c.from("advances").insert(r.map(f));t?console.error("Error inserting advances to Supabase:",t):console.log(`Successfully inserted ${r.length} advances to Supabase`)}for(const t of a){const{error:s}=await c.from("advances").update(f(t)).eq("id",t.id);s&&console.error(`Error updating advance ${t.id} in Supabase:`,s)}if(a.length>0&&console.log(`Successfully updated ${a.length} advances in Supabase`),l.length>0){const t=[...e];for(const s of l)t.push(E(s));localStorage.setItem("advances",JSON.stringify(t)),console.log(`Successfully pulled ${l.length} advances from Supabase`)}}catch(e){console.error("Error in syncAdvances:",e)}}async function v(){try{const e=JSON.parse(localStorage.getItem("absences")||"[]");if(e.length===0){console.log("No local absences to sync");return}const{data:o,error:i}=await c.from("leaves").select("*");if(i){console.error("Error fetching absences from Supabase:",i);return}if(!o||o.length===0){console.log("No absences in Supabase, pushing all local absences");const{error:t}=await c.from("leaves").insert(e.map(m));t?console.error("Error pushing absences to Supabase:",t):console.log(`Successfully pushed ${e.length} absences to Supabase`);return}const n=new Map(o.map(t=>[t.id,t])),d=new Map(e.map(t=>[t.id,t])),r=e.filter(t=>!n.has(t.id)),a=e.filter(t=>{const s=n.get(t.id);return s?t.status!==s.status:!1}),l=o.filter(t=>!d.has(t.id));if(r.length>0){const{error:t}=await c.from("leaves").insert(r.map(m));t?console.error("Error inserting absences to Supabase:",t):console.log(`Successfully inserted ${r.length} absences to Supabase`)}for(const t of a){const{error:s}=await c.from("leaves").update(m(t)).eq("id",t.id);s&&console.error(`Error updating absence ${t.id} in Supabase:`,s)}if(a.length>0&&console.log(`Successfully updated ${a.length} absences in Supabase`),l.length>0){const t=[...e];for(const s of l)t.push(A(s));localStorage.setItem("absences",JSON.stringify(t)),console.log(`Successfully pulled ${l.length} absences from Supabase`)}}catch(e){console.error("Error in syncAbsences:",e)}}function g(e){return{id:e.id,name:e.name,position:e.position,department:e.department,base_salary:e.base_salary||e.basicSalary,monthly_incentives:e.monthly_incentives||e.monthlyIncentives||0,join_date:e.join_date,status:e.status||"active",created_at:e.created_at||new Date().toISOString(),updated_at:e.updated_at||new Date().toISOString()}}function y(e){return{id:e.id,name:e.name,position:e.position,department:e.department,base_salary:e.base_salary,monthly_incentives:e.monthly_incentives||0,join_date:e.join_date,status:e.status||"active",created_at:e.created_at,updated_at:e.updated_at}}function f(e){return{id:e.id,employee_id:e.employeeId,amount:e.amount,remaining_amount:e.remainingAmount,request_date:e.requestDate,expected_repayment_date:e.expectedRepaymentDate,actual_repayment_date:e.actualRepaymentDate||null,status:e.status||"pending",notes:e.notes||null,created_at:e.created_at||new Date().toISOString()}}function E(e){return{id:e.id,employeeId:e.employee_id,employeeName:"Unknown",amount:e.amount,remainingAmount:e.remaining_amount,requestDate:e.request_date,expectedRepaymentDate:e.expected_repayment_date,actualRepaymentDate:e.actual_repayment_date,status:e.status,notes:e.notes,created_at:e.created_at}}function m(e){return{id:e.id,employee_id:e.employeeId,start_date:e.startDate,end_date:e.endDate,reason:e.reason||null,type:e.type,status:e.status||"pending",notes:e.notes||null,created_at:e.created_at||new Date().toISOString()}}function A(e){return{id:e.id,employeeId:e.employee_id,employeeName:"Unknown",startDate:e.start_date,endDate:e.end_date,reason:e.reason,type:e.type,status:e.status,notes:e.notes,created_at:e.created_at}}export{I as syncAllData};
